Technical interview questions:
1. (function myFun(){
		console.log(this);
	})();
	
	Output:
	Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …}

2. (function myFun(){
		"use strict"
		console.log(this);
	})();
	
	Output:
	undefined
	
3. Scope and hoisting
var a = 1; 
function b() { 
    a = 10; 
    return; 
    function a() {} 
} 
b(); 
console.log(a);

Output:
1

4. Write a mul function which will produce the following outputs 

console.log(mul(2)(3)(4)); // output : 24 
console.log(mul(4)(3)(4)); // output : 48

function mul (x) {
    return function (y) { // anonymous function 
        return function (z) { // anonymous function 
            return x * y * z; 
        };
    };
}

5. What will be the output of code below?
var salary = "1000$";

 (function () {
     console.log(salary);

     var salary = "5000$";

     console.log(salary);
})();


Output:
undefined
5000$

6. Remove Duplicates from an Array
const names = ['John', 'Paul', 'George', 'Ringo', 'John'];

 Set will automatically remove duplicates for us.

let unique = [...new Set(names)];
console.log(unique); // 'John', 'Paul', 'George', 'Ringo'



Another option is to use filter().

const names = ['John', 'Paul', 'George', 'Ringo', 'John'];

let x = (names) => names.filter((v,i) => names.indexOf(v) === i)
x(names); // 'John', 'Paul', 'George', 'Ringo'


And finally we can use forEach().
const names = ['John', 'Paul', 'George', 'Ringo', 'John'];

function removeDups(names) {
  let unique = {};
  names.forEach(function(i) {
    if(!unique[i]) {
      unique[i] = true;
    }
  });
  return Object.keys(unique);
}

removeDups(names); // // 'John', 'Paul', 'George', 'Ringo'



1. const arr = [10, 12, 15, 21];
	for (var i = 0; i < arr.length; i++) {
		setTimeout(function() {
			console.log('Index: ' + i + ', element: ' + arr[i]);
		}, 3000);
	}
	
	output:  Index: 4, element: undefined
				Index: 4, element: undefined
				Index: 4, element: undefined
				Index: 4, element: undefined
				
2. const arr = [10, 12, 15, 21];
for (let i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log('Index: ' + i + ', element: ' + arr[i]);
  }, 3000);
}

output:
Index: 0, element: 10
 Index: 1, element: 12
Index: 2, element: 15
Index: 3, element: 21


3. Write a function that would allow you to do this.
var addSix = createBase(6);
addSix(10); // returns 16
addSix(21); // returns 27

function createBase(baseNumber) {
  return function(N) {
    // we are referencing baseNumber here even though it was declared
    // outside of this function. Closures allow us to do this in JavaScript
    return baseNumber + N;
  }
}


4. nth prime number:

function isPrime(int) {
  if (int <= 1) {
    return false;
  }
  for (var x = int-1; x > 1; x--) {
    if (int % x === 0) {
      return false;
    }
  }
  return true;
}


function nthPrime(n) {
  if (n < 1) {
    return null;
  }
  var primeCount = 0;
  for (var x = 0; primeCount <= n; x++) {
    if (isPrime(x)) {
      primeCount += 1;
    }
    if (primeCount === n) {
      return x;
    }
  }
}


Custom map implementation:
Array.prototype.myMap=function(callback){
	const resultArray=[];
	for(let index=0; index<this.length; index++){
		resultArray.push(callback(this[index], index, this));
	}
	return resultArray;
}
const arr=[1,2,3];
const result=arr.myMap(function(val){
	return val*2;
});
//[2, 4, 6]

Custom Filter implementation:
Array.prototype.myFilter=function(callback){
	const resultArray=[];
	for(let index=0; index<this.length; index++){
		const result=callback(this[index], index, this);
		if(result===true){
			resultArray.push(this[index]);
		}
		
	}
	return resultArray;
}

const arr=[1,2,3,4];

const result=arr.myFilter(function(val){
	return val%2==0;
});
//[2, 4]


Custom Reduce Implementation:
Array.prototype.myReducer=function(reducer, initialValue){
	let accumulator = initialValue === undefined ? 0 : initialValue
	for(let index=0; index<this.length; index++){
		accumulator=reducer(accumulator, this[index], index, this);
		
		
	}
	return accumulator;
}

const arr=[1,2,3,4];

const result=arr.myReducer(function(accumulator, currentValue){
	return accumulator+currentValue
})
//10

const result=arr.myReducer(function(accumulator, currentValue){
	return accumulator+currentValue
}, 5)
//15

